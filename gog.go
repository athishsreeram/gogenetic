package main

import (
	"gogenetic/gogexec"
	"gogenetic/gogfile"
	"log"
	"os"

	"io/ioutil"

	"flag"

	"github.com/BurntSushi/toml"
)

// AutoGeneratedCli Create & copied from https://xuri.me/toml-to-go/
type AutoGeneratedCli struct {
	Gogenetic struct {
		Apiname              string `toml:"Apiname"`
		TomlDir              string `toml:"TomlDir"`
		Tomlesread           string `toml:"Tomlesread"`
		Escqrsread           string `toml:"Escqrsread"`
		Esreadoutput         string `toml:"Esreadoutput"`
		Eventstorereadoutput string `toml:"eventstorereadoutput"`
		Cudoutput            string `toml:"Cudoutput"`
		Escqrscud            string `toml:"Escqrscud"`
		Dir                  string `toml:"Dir"`
		OutDir               string `toml:"outDir"`
		Crud                 string `toml:"Crud"`
		Crudoutput           string `toml:"Crudoutput"`
		Eswithoutcqrsoutput  string `toml:"Eswithoutcqrsoutput"`
		Eswithoutcqrs        string `toml:"Eswithoutcqrs"`
	} `toml:"Gogenetic"`
	API struct {
		Name string `toml:"Name"`
	} `toml:"API"`
}

func main() {

	dir, err := os.Getwd()
	if err != nil {
		log.Fatal(err)
	}

	//0. Argument Options Simple CLI with go-command-line-flags
	tomlFile := flag.String("tomlFile", dir+"/toml/test.toml", " Input the TOML File.")
	archType := flag.String("archType", "es-cqrs", "Architechture Type")
	outDir := flag.String("outDir", "output", " Input the TOML File.")
	templateFile := flag.String("templateFile", "go/proto-grpctemplate.tpl", " Input the TOML File.")

	flag.Parse()

	//go run gogentic.go /Users/anharay/go/src/gogenetic/toml/test.toml /Users/anharay/go/src/gogenetic/template/grpctemplate.goproto
	//1. Load TOML file
	tomlData, err := ioutil.ReadFile(*tomlFile)
	if err != nil {
		log.Fatal(err)
	}
	//log.Print("Parsed TOML")
	//log.Print(string(tomlData))

	//2. Set value
	var conf AutoGeneratedCli

	//3. Parse & Load value dynamically from given input toml
	//log.Print("Parsed & Load value into Generated Structs from Create & copied from https://xuri.me/toml-to-go/")
	var confToml AutoGeneratedCli
	if _, err := toml.Decode(string(tomlData), &confToml); err != nil {
		log.Fatal(err)
	}

	conf.Gogenetic.Apiname = confToml.API.Name
	conf.Gogenetic.TomlDir = *tomlFile
	conf.Gogenetic.Dir = dir
	conf.Gogenetic.OutDir = *outDir

	//4. Set Value to the CLI Stucts input
	if *archType == "es-cqrs" {

		conf.Gogenetic.Tomlesread = dir + "/toml/eventstore-read.toml"
		conf.Gogenetic.Escqrsread = "go/es-cqrs-read/"
		conf.Gogenetic.Escqrscud = "go/es-cqrs-cud/"
		conf.Gogenetic.Esreadoutput = *outDir + "/es-read-output"
		conf.Gogenetic.Eventstorereadoutput = *outDir + "/eventstore-read-output"
		conf.Gogenetic.Cudoutput = *outDir + "/es-cud-output"

		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"proto-grpcresttemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"servicecrudtemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"grpcservertemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"grpcrestservertemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"cmdservertemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"grpcclienttemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"xormdomaintemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"configtemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"devconftemplate.tpl", conf.Gogenetic.Esreadoutput)

		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"proto-grpcresttemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"servicecrudtemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"grpcservertemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"grpcrestservertemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"cmdservertemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"grpcclienttemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"xormdomaintemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"configtemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"devconftemplate.tpl", conf.Gogenetic.Eventstorereadoutput)

		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"proto-grpcresttemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"servicenatstemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"grpcservertemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"grpcrestservertemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"cmdservertemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"grpcclienttemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"xormdomaintemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"natssubclienttemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"natspubclienttemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"servicetodomaintemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"natsconutilclienttemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"configtemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"devconftemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"commandtoeventtemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"xormdomaintemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"xormcommandstoredomaintemplate.tpl", conf.Gogenetic.Cudoutput)

		gogexec.MoveTo(conf.Gogenetic.Esreadoutput)

		runGRPC(conf)

		formatCode(conf.Gogenetic.Dir + "/" + conf.Gogenetic.Esreadoutput)

		gogexec.MoveTo(conf.Gogenetic.Eventstorereadoutput)

		runGRPC(conf)

		formatCode(conf.Gogenetic.Dir + "/" + conf.Gogenetic.Eventstorereadoutput)

		gogexec.MoveTo(conf.Gogenetic.Cudoutput)

		runGRPC(conf)

		formatCode(conf.Gogenetic.Dir + "/" + conf.Gogenetic.Cudoutput)

	}

	if *archType == "es-async-cqrs" {

		conf.Gogenetic.Tomlesread = "/toml/eventstore-read.toml"
		conf.Gogenetic.Escqrsread = "go/es-cqrs-read/"
		conf.Gogenetic.Escqrscud = "go/es-cqrs-cud/"
		conf.Gogenetic.Esreadoutput = *outDir + "/es-read-output"
		conf.Gogenetic.Eventstorereadoutput = *outDir + "/eventstore-read-output"
		conf.Gogenetic.Cudoutput = *outDir + "/es-cud-output"

		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"proto-grpcresttemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"servicecrudtemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"grpcservertemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"grpcrestservertemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"cmdservertemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"grpcclienttemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"xormdomaintemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"configtemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"devconftemplate.tpl", conf.Gogenetic.Esreadoutput)

		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"proto-grpcresttemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"servicecrudtemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"grpcservertemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"grpcrestservertemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"cmdservertemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"grpcclienttemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"xormdomaintemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"configtemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"devconftemplate.tpl", conf.Gogenetic.Eventstorereadoutput)

		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"proto-grpcresttemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"serviceasyncnatstemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"grpcservertemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"grpcrestservertemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"cmdservertemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"grpcclienttemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"xormdomaintemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"natssubclienttemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"natspubclienttemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"servicetodomaintemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"natsconutilclienttemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"configtemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"devconftemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"commandtoeventtemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"xormdomaintemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"xormcommandstoredomaintemplate.tpl", conf.Gogenetic.Cudoutput)

		gogexec.MoveTo(conf.Gogenetic.Esreadoutput)

		runGRPC(conf)

		formatCode(conf.Gogenetic.Dir + "/" + conf.Gogenetic.Esreadoutput)

		gogexec.MoveTo(conf.Gogenetic.Eventstorereadoutput)

		runGRPC(conf)

		formatCode(conf.Gogenetic.Dir + "/" + conf.Gogenetic.Eventstorereadoutput)

		gogexec.MoveTo(conf.Gogenetic.Cudoutput)

		runGRPC(conf)

		formatCode(conf.Gogenetic.Dir + "/" + conf.Gogenetic.Cudoutput)

	}

	if *archType == "es-async-cqrs-read" {

		conf.Gogenetic.Tomlesread = "/toml/eventstore-read.toml"
		conf.Gogenetic.Escqrsread = "go/es-cqrs-read/"
		conf.Gogenetic.Esreadoutput = *outDir + "/es-read-output"

		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"proto-grpcresttemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"servicecrudtemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"grpcservertemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"grpcrestservertemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"cmdservertemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"grpcclienttemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"xormdomaintemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"configtemplate.tpl", conf.Gogenetic.Esreadoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrsread+"devconftemplate.tpl", conf.Gogenetic.Esreadoutput)

		gogexec.MoveTo(conf.Gogenetic.Esreadoutput)

		runGRPC(conf)

		formatCode(conf.Gogenetic.Dir + "/" + conf.Gogenetic.Esreadoutput)

	}

	if *archType == "es-cqrs-eventstore-read" {

		conf.Gogenetic.Tomlesread = "/toml/eventstore-read.toml"
		conf.Gogenetic.Escqrsread = "go/es-cqrs-read/"
		conf.Gogenetic.Eventstorereadoutput = *outDir + "/eventstore-read-output"

		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"proto-grpcresttemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"servicecrudtemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"grpcservertemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"grpcrestservertemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"cmdservertemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"grpcclienttemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"xormdomaintemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"configtemplate.tpl", conf.Gogenetic.Eventstorereadoutput)
		gogfile.CreateFile(conf.Gogenetic.Tomlesread, conf.Gogenetic.Escqrsread+"devconftemplate.tpl", conf.Gogenetic.Eventstorereadoutput)

		gogexec.MoveTo(conf.Gogenetic.Eventstorereadoutput)

		runGRPC(conf)

		formatCode(conf.Gogenetic.Dir + "/" + conf.Gogenetic.Eventstorereadoutput)

		gogexec.MoveTo(conf.Gogenetic.Cudoutput)

		runGRPC(conf)

		formatCode(conf.Gogenetic.Dir + "/" + conf.Gogenetic.Cudoutput)
	}

	if *archType == "es-async-cqrs-cmd-event-handler-cud" {

		conf.Gogenetic.Tomlesread = "/toml/eventstore-read.toml"
		conf.Gogenetic.Escqrscud = "go/es-cqrs-cud/"
		conf.Gogenetic.Cudoutput = *outDir + "/es-cud-output"
		// To-do dont know what this is for
	}

	if *archType == "es-async-cmdhandler-cqrs" {

		conf.Gogenetic.Escqrscud = "go/es-cqrs-cud/"
		conf.Gogenetic.Cudoutput = *outDir + "/es-cmdhandler-cud-output"

		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"natssubclientchtemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"natspubclienttemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"natsconutilclienttemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"configtemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"devconftemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"xormesdomaintemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"commandtoeventtemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"xormcommandstoredomaintemplate.tpl", conf.Gogenetic.Cudoutput)

		gogexec.MoveTo(conf.Gogenetic.Cudoutput)

		runGRPC(conf)

		formatCode(conf.Gogenetic.Dir + "/" + conf.Gogenetic.Cudoutput)

	}

	if *archType == "es-async-eventhandler-cqrs" {

		conf.Gogenetic.Escqrscud = "go/es-cqrs-cud/"
		conf.Gogenetic.Cudoutput = *outDir + "/es-eventhandler-cud-output"

		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"proto-grpcresttemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"xormdomaintemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"natssubclienttemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"natspubclienttemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"servicetodomaintemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"natsconutilclienttemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"configtemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"devconftemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"xormesdomaintemplate.tpl", conf.Gogenetic.Cudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Escqrscud+"xormcommandstoredomaintemplate.tpl", conf.Gogenetic.Cudoutput)

		gogexec.MoveTo(conf.Gogenetic.Cudoutput)

		runGRPC(conf)

		formatCode(conf.Gogenetic.Dir + "/" + conf.Gogenetic.Cudoutput)

	}

	if *archType == "crud" {

		conf.Gogenetic.Crud = "go/"
		conf.Gogenetic.Crudoutput = *outDir + "/crud"

		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Crud+"proto-grpcresttemplate.tpl", conf.Gogenetic.Crudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Crud+"servicecrudtemplate.tpl", conf.Gogenetic.Crudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Crud+"grpcservertemplate.tpl", conf.Gogenetic.Crudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Crud+"grpcrestservertemplate.tpl", conf.Gogenetic.Crudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Crud+"cmdservertemplate.tpl", conf.Gogenetic.Crudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Crud+"grpcclienttemplate.tpl", conf.Gogenetic.Crudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Crud+"xormdomaintemplate.tpl", conf.Gogenetic.Crudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Crud+"configtemplate.tpl", conf.Gogenetic.Crudoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Crud+"devconftemplate.tpl", conf.Gogenetic.Crudoutput)

		gogexec.MoveTo(conf.Gogenetic.Crudoutput)

		runGRPC(conf)

		formatCode(conf.Gogenetic.Dir + "/" + conf.Gogenetic.Crudoutput)

	}

	if *archType == "es-without-cqrs" {
		conf.Gogenetic.Eswithoutcqrs = "go/"
		conf.Gogenetic.Eswithoutcqrsoutput = *outDir + "/es-without-cqrs"

		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Eswithoutcqrs+"proto-grpcresttemplate.tpl", conf.Gogenetic.Eswithoutcqrsoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Eswithoutcqrs+"servicenatstemplate.tpl", conf.Gogenetic.Eswithoutcqrsoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Eswithoutcqrs+"grpcservertemplate.tpl", conf.Gogenetic.Eswithoutcqrsoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Eswithoutcqrs+"grpcrestservertemplate.tpl", conf.Gogenetic.Eswithoutcqrsoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Eswithoutcqrs+"cmdservertemplate.tpl", conf.Gogenetic.Eswithoutcqrsoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Eswithoutcqrs+"grpcclienttemplate.tpl", conf.Gogenetic.Eswithoutcqrsoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Eswithoutcqrs+"xormdomaintemplate.tpl", conf.Gogenetic.Eswithoutcqrsoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Eswithoutcqrs+"natssubclienttemplate.tpl", conf.Gogenetic.Eswithoutcqrsoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Eswithoutcqrs+"natspubclienttemplate.tpl", conf.Gogenetic.Eswithoutcqrsoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Eswithoutcqrs+"servicetodomaintemplate.tpl", conf.Gogenetic.Eswithoutcqrsoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Eswithoutcqrs+"natsconutilclienttemplate.tpl", conf.Gogenetic.Eswithoutcqrsoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Eswithoutcqrs+"configtemplate.tpl", conf.Gogenetic.Eswithoutcqrsoutput)
		gogfile.CreateFile(*tomlFile, conf.Gogenetic.Eswithoutcqrs+"devconftemplate.tpl", conf.Gogenetic.Eswithoutcqrsoutput)

		gogexec.MoveTo(conf.Gogenetic.Eswithoutcqrsoutput)

		runGRPC(conf)

		formatCode(conf.Gogenetic.Dir + "/" + conf.Gogenetic.Eswithoutcqrsoutput)
	}

	if *archType == "file" {
		gogfile.CreateFile(*tomlFile, *templateFile, *outDir)
	}

	gogexec.MoveTo(conf.Gogenetic.Dir + "/" + conf.Gogenetic.OutDir)
	applyGoMod(*outDir)

}

func runGRPC(conf AutoGeneratedCli) {
	grpcargs := []string{"--proto_path=proto", "-I/usr/local/include", "-I.", "-I" + os.Getenv("GOPATH") + "/src", "-I" + os.Getenv("GOPATH") + "/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis", "--go_out=plugins=grpc:proto", conf.Gogenetic.Apiname + "-service.proto"}
	gogexec.ExecuteProtoCmd(grpcargs)

	grpcgatewayargs := []string{"--proto_path=proto", "-I/usr/local/include", "-I.", "-I" + os.Getenv("GOPATH") + "/src", "-I" + os.Getenv("GOPATH") + "/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis", "--grpc-gateway_out=logtostderr=true:proto", conf.Gogenetic.Apiname + "-service.proto"}
	gogexec.ExecuteProtoCmd(grpcgatewayargs)

	grpcswaggerargs := []string{"--proto_path=proto", "-I/usr/local/include", "-I.", "-I" + os.Getenv("GOPATH") + "/src", "-I" + os.Getenv("GOPATH") + "/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis", "--swagger_out=logtostderr=true:proto", conf.Gogenetic.Apiname + "-service.proto"}
	gogexec.ExecuteProtoCmd(grpcswaggerargs)

}

func formatCode(dir string) {
	gofmtargs := []string{"-w", dir}
	gogexec.ExecuteCmd("gofmt", gofmtargs)
}

func applyGoMod(dir string) {
	gomodargs := []string{"mod", "init", dir}
	gogexec.ExecuteCmd("go", gomodargs)
}
