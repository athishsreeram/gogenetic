package arch

import (
	"gogenetic/config"
	"gogenetic/gogexec"
	"gogenetic/gogfile"

	"gogenetic/data"

	"github.com/spf13/viper"
)

func runLiquibaseUpdateSQL(conf data.AutoGeneratedCli, outputDir string) {

	sqldir := conf.Gogenetic.Dir + "/" + outputDir + "/sql"
	sqllibdir := conf.Gogenetic.Dir + "/" + outputDir + "/sql/lib"

	gogexec.CreateDirIfNotExist(sqllibdir)
	gogexec.LiquibaseTemplate(sqllibdir)

	if conf.Gogenetic.DbType == "mysql" {
		gogexec.LiquibaseMySQLTemplate(sqldir)
	}

	gogexec.MoveTo(conf.Gogenetic.Dir + "/" + outputDir + "/sql")

	liquibaseexecargs := []string{"-cp", "\".:lib/liquibase.jar:lib/liquibase.properties:lib/logback-classic-1.2.3.jar:lib/logback-classic-1.2.3.jar:lib/logback-core-1.2.3.jar:lib/slf4j-api-1.7.25.jar:lib/snakeyaml-1.23.jar:lib/mysql-connector-java-5.0.5.jar\" ", "liquibase.integration.commandline.Main", "--changeLogFile=" + sqldir + "/liquibase-changelog.xml", "updateSQL"}
	gogexec.ExecuteCmd("java", liquibaseexecargs)
}

func LiquibaseLangArchConf(conf data.AutoGeneratedCli, dbType string) {

	var userTomlDir = conf.Gogenetic.TomlDir
	var userApiName = conf.API.Name
	var archTypes config.ArchTypes

	viper.Unmarshal(&archTypes)

	gogexec.MoveTo(conf.Gogenetic.Dir)

	for _, arch := range archTypes.ArchType {
		if dbType == arch.Name {
			for _, archPgt := range arch.Projects {
				for _, project := range archTypes.Projects {
					if archPgt == project.Name {

						if project.TemplateToml == "" {
							conf.Gogenetic.TomlDir = userTomlDir
						} else {
							conf.Gogenetic.TomlDir = project.TemplateToml
						}

						if project.ApiName == "" {
							conf.API.Name = userApiName
						} else {
							conf.API.Name = project.ApiName
						}

						for _, projectTpl := range project.Templates {
							gogfile.CreateFile(conf, project.TemplateBasePath+projectTpl, conf.Gogenetic.OutDir+project.OutputDir, "db")
						}

					}

				}
			}

			gogexec.MoveTo(conf.Gogenetic.Dir + "/" + conf.Gogenetic.OutDir)
			runLiquibaseUpdateSQL(conf, conf.Gogenetic.OutDir)

		}

	}

}
