package main

import (
	"html/template"
	"log"
	"os"

	"io/ioutil"

	"github.com/BurntSushi/toml"
)

// Create & copied from https://xuri.me/toml-to-go/
type AutoGenerated struct {
	API struct {
		Name      string `toml:"name"`
		Request   string `toml:"request"`
		Response  string `toml:"response"`
		Protocol  string `toml:"protocol"`
		Operation string `toml:"operation"`
	} `toml:"API"`
	APIRequest struct {
		A int `toml:"a"`
		B int `toml:"b"`
	} `toml:"APIRequest"`
	APIResponse struct {
		Result int `toml:"result"`
	} `toml:"APIResponse"`
}

// Create & copied from https://xuri.me/toml-to-go/

func check(e error) {
	if e != nil {
		panic(e)
	}
}

func main() {

	//1. Load TOML file
	tomlData, err := ioutil.ReadFile("/Users/anharay/go/src/gogenetic/toml/proto.toml")
	check(err)
	log.Print("Parsed TOML")
	log.Print(string(tomlData))

	//2. Load Template
	tmpl, err := ioutil.ReadFile("/Users/anharay/go/src/gogenetic/template/proto_template.goproto")
	check(err)
	log.Print("Parsed Template")
	log.Print(string(tmpl))

	//3. Parse & Load value dynamically
	var conf AutoGenerated
	if _, err := toml.Decode(string(tomlData), &conf); err != nil {
		log.Fatal(err)
	}
	log.Print("Parsed & Load value into Generated Structs from Create & copied from https://xuri.me/toml-to-go/")
	log.Printf("title: %s", conf.API.Name)

	log.Print("Create a goTemplate and Pass TOML struts Value to create the final grpc file")
	//4. Create Template and Pass TOML Value
	t := template.New("GRPC template")

	t1, err := t.Parse(string(tmpl))
	if err != nil {
		log.Fatal("Parse: ", err)
		return
	}

	err = t1.Execute(os.Stdout, conf)
	if err != nil {
		log.Fatal("Execute: ", err)
		return
	}

}
