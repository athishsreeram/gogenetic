package arch

import (
	"gogenetic/config"
	"gogenetic/gogfile"
	"strconv"
	"strings"

	"gogenetic/data"

	"github.com/spf13/viper"
)

func JavaLangArchConf(conf data.AutoGeneratedCli, archType string) {

	var userTomlDir = conf.Gogenetic.TomlDir
	var userApiName = conf.API.Name
	var archTypes config.ArchTypes

	viper.Unmarshal(&archTypes)

	for _, arch := range archTypes.ArchType {
		if archType == arch.Name {
			for _, archPgt := range arch.Projects {
				for _, project := range archTypes.Projects {
					if archPgt == project.Name {

						if project.TemplateToml == "" {
							conf.Gogenetic.TomlDir = userTomlDir
						} else {
							conf.Gogenetic.TomlDir = project.TemplateToml
						}

						if project.ApiName == "" {
							conf.API.Name = userApiName
						} else {
							conf.API.Name = project.ApiName
						}

						for _, projectTpl := range project.Templates {

							if strings.Contains("modeltemplate.tpl", projectTpl) {
								noOfModel := len(conf.Models.Model)
								for i := 0; i < noOfModel; i++ {
									conf.Models.Index = strconv.Itoa(i)
									gogfile.CreateFile(conf, project.TemplateBasePath+projectTpl, conf.Gogenetic.OutDir+project.OutputDir, "")
								}
							} else {
								gogfile.CreateFile(conf, project.TemplateBasePath+projectTpl, conf.Gogenetic.OutDir+project.OutputDir, "")
							}
						}

					}

				}
			}

		}

	}

}
