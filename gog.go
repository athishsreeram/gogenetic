package main

import (
	"bytes"
	"fmt"
	"log"
	"os"

	"io/ioutil"

	"github.com/BurntSushi/toml"
	"github.com/gobuffalo/packr"
	"github.com/spf13/viper"

	"gogenetic/arch"
	"gogenetic/data"
	"gogenetic/gogfile"
)

func main() {

	box := packr.NewBox("./config")

	viper.SetConfigType("toml")

	dir, err := os.Getwd()
	if err != nil {
		log.Fatal(err)
	}

	var tomlFile string
	var archType string
	var outDir string
	var lang string
	var templateFile string
	var startGo string
	var dbType string
	goGenConfig := dir + "/gogconfig.toml"

	goGenConf, err := os.Stat(goGenConfig)
	if goGenConf != nil {
		gogeneticConf, err := ioutil.ReadFile(goGenConfig)
		if err != nil {
			log.Fatal(err)
		}

		//2. Parse & Load value dynamically from given input toml
		var goGenconf data.AutoGeneratedCli
		if _, err := toml.Decode(string(gogeneticConf), &goGenconf); err != nil {
			log.Fatal(err)
		}

		tomlFile = goGenconf.Gogenetic.TomlDir
		archType = goGenconf.Gogenetic.ArchType
		outDir = goGenconf.Gogenetic.OutDir
		templateFile = goGenconf.Gogenetic.TemplateFile
		lang = goGenconf.Gogenetic.Lang
		dbType = goGenconf.Gogenetic.DbType

		log.Printf("Parameters \n")
		log.Printf("Gogenetic Toml Input File %q\n", tomlFile)
		log.Printf("ArchType %q\n", archType)
		log.Printf("Out Dir %q\n", outDir)
		log.Printf("Template File %q\n", templateFile)
		log.Printf("Lang  %q\n", lang)
		log.Printf("DbType  %q\n", dbType)

	} else {
		for {

			for {
				log.Println("Gogenetic Toml Input File:")
				if _, err := fmt.Scanf("%s", &tomlFile); err != nil {
					log.Printf("%s\n", err)
				} else {
					_, err := os.Stat(tomlFile)
					if os.IsNotExist(err) {
						log.Printf("%s\n", err)
					} else {
						break
					}
				}
			}

			for {
				log.Println("Enter the Arch Type:")
				if _, err := fmt.Scanf("%s", &archType); err != nil {
					log.Printf("%s\n", err)
				} else {
					arr := []string{"crud", "crud-object", "es-sync-with-cqrs", "es-sync-without-cqrs", "es-async-with-cqrs",
						"es-async-with-cqrs-read", "es-async-cmdhandler-with-cqrs", "es-async-eventhandler-with-cqrs", "es-cqrs-eventstore-read", "file"}
					if contains(arr, archType) {
						break
					}

				}
			}

			log.Println("Enter the Output Directory:")
			if _, err := fmt.Scanf("%s", &outDir); err != nil {
				log.Printf("%s\n", err)
			}

			for {
				log.Println("Enter the Lang Type:")
				if _, err := fmt.Scanf("%s", &lang); err != nil {
					log.Printf("%s\n", err)
				} else {
					arr1 := []string{"go", "java", "liquibase"}
					if contains(arr1, lang) {
						break
					}

				}
			}

			if lang == "file" {
				log.Println("Enter the Template file:")
				if _, err := fmt.Scanf("%s", &templateFile); err != nil {
					log.Printf("%s\n", err)
				}
			}

			log.Println("Enter the Database:")
			if _, err := fmt.Scanf("%s", &dbType); err != nil {
				log.Printf("%s\n", err)
			}

			log.Printf("Parameters .\n")
			log.Printf("Gogenetic Toml Input File %q\n", tomlFile)
			log.Printf("ArchType %q\n", archType)
			log.Printf("Out Dir %q\n", outDir)
			log.Printf("Template File %q\n", templateFile)
			log.Printf("Lang  %q\n", lang)
			log.Printf("Database  %q\n", dbType)

			log.Println("Confirm Start Gogenetic Y/N:")
			if _, err := fmt.Scanf("%s", &startGo); err != nil {
				log.Printf("%s\n", err)
			}

			if startGo == "Y" || startGo == "y" {

				break
			}
		}

	}

	//0. Argument Options Simple CLI with go-command-line-flags
	/**tomlFile := flag.String("tomlFile", dir+"/toml/test.toml", " Input the TOML File.")
	archType := flag.String("archType", "es-cqrs", "Architechture Type")
	outDir := flag.String("outDir", "output", " Output directory")
	lang := flag.String("lang", "go", " Input the language")
	templateFile := flag.String("templateFile", "go/proto-grpctemplate.tpl", " Input the TOML File.")*/

	//flag.Parse()

	//1. Load TOML file
	tomlData, err := ioutil.ReadFile(tomlFile)
	if err != nil {
		log.Fatal(err)
	}

	//2. Parse & Load value dynamically from given input toml
	var conf data.AutoGeneratedCli
	if _, err := toml.Decode(string(tomlData), &conf); err != nil {
		log.Fatal(err)
	}
	conf.Gogenetic.TomlDir = tomlFile
	conf.Gogenetic.Dir = dir
	conf.Gogenetic.OutDir = outDir
	conf.Gogenetic.Lang = lang
	conf.Gogenetic.DbType = dbType

	if archType != "file" {
		archConfig := conf.Gogenetic.Lang + "/" + conf.Gogenetic.Lang + "-arch-config.toml"
		utilConfig := conf.Gogenetic.Lang + "/" + conf.Gogenetic.Lang + "-file-config.toml"

		archConfigFile, err := box.FindString(archConfig)
		if err != nil {
			log.Fatal(err)
		}

		err = viper.ReadConfig(bytes.NewBuffer([]byte(archConfigFile)))
		if err != nil {
			log.Println("Config not found...")
		}

		utilConfigFile, err := box.FindString(utilConfig)
		if err != nil {
			log.Fatal(err)
		}

		err = viper.MergeConfig(bytes.NewBuffer([]byte(utilConfigFile)))
		if err != nil {
			log.Println("Config not found...")
		}
	}

	if archType == "file" {
		gogfile.CreateFile(conf, templateFile, conf.Gogenetic.OutDir, "file")
	}

	if conf.Gogenetic.Lang == "go" {
		arch.GoLangArchConf(conf, archType)
	}

	if conf.Gogenetic.Lang == "java" {
		arch.JavaLangArchConf(conf, archType)
	}

	if dbType != "" {

		archConfig := "liquibase/liquibase-arch-config.toml"
		utilConfig := "liquibase/liquibase-file-config.toml"

		archConfigFile, err := box.FindString(archConfig)
		if err != nil {
			log.Fatal(err)
		}

		err = viper.ReadConfig(bytes.NewBuffer([]byte(archConfigFile)))
		if err != nil {
			log.Println("Config not found...")
		}

		utilConfigFile, err := box.FindString(utilConfig)
		if err != nil {
			log.Fatal(err)
		}

		err = viper.MergeConfig(bytes.NewBuffer([]byte(utilConfigFile)))
		if err != nil {
			log.Println("Config not found...")
		}

		arch.LiquibaseLangArchConf(conf, dbType)
	}

}

func contains(arr []string, str string) bool {
	for _, a := range arr {
		if a == str {
			return true
		}
	}
	return false
}
